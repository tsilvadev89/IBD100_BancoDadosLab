bit.ly/PPZNOSQL
tinyurl.com/PPZNOSQL
Revisão para meus alunos da FATEC

1. Porque é necessário denormalizar as tabelas de dimensão num sistema de BI e porque isto não fere a integridade referencial do sistema.
RL: Normalizamos um sistema tradicional, principalmente, para unificar as referências a um item. Ao inserir ou alterar, não temos que fazer código repetido ou deixar de alterar por erro alguma referência. Porém, num sistema de BI, sistema de tomada de decisão, fazemos agregações massivas (group by, sort by), que é basicamente ler muitos registros, e para isso tenho que tirar a normalização (denormalização), para ter menos joins. Otimizar agregação começa por retirar joins. Para um sistema tradicional, joins não afetam a perfomance, mas para um sistema de BI, onde leio milhões de registros, e para cada um teria que fazer alguns joins, é ineficiente ter muitos joins. Além disso, o sistema de BI (Business Intelligence), também chamado de Sistema Analítico, é Read Only para o usuário, não trazendo o risco de esquecer alguma alteração de item duplicado. A modelagem é diferente, chamada de Star Schema, onde a tabela central, de métricas, chamada Tabela de Fatos, que tem o que estou medindo, o quantitativo = Quanto e Preço Vendido. As tabelas associadas, são o qualitativo. Tempo = Quando, Produto = O Que, Loja = Onde, Promoção = Como, Cliente = Quem. São as circunstâncias onde ocorreu cada compra registrada. Estas tabelas são chamadas de Tabelas de Dimensão. Quem divulgou essa forma de modelar se chama Kimball = Modelagem Dimensional. Note que como o padrão num sistema de BI é ler muitos registros (agregação massiva), minha otimização deve ser para esse tipo de padrão. Por isso que todas as Tabelas de Dimensão estão a apenas um join de distância da Tabela de Fatos. Existe uma forma de atualização controlada de um sistema de BI, chamado processo de ETL (Extract Transform Load). Percebam, que como o sistema de BI é Read Only para o usuário, não existe o problema de perda de Integridade Referencial, motivo principal da normalização. 
RC: Para otimizar agregações massivas retirando joins. Porque o sistema de BI é Read Only. Normalização serve para garantir a integridade referencial num sistema.

2. Como é feita a persistência de hierarquias de clientes corporativos e atributos multivalorados em bancos de dados relacionais.
RL: Bancos de Dados Relacionais podem mapear hierarquias (ex.: Centro Paula Souza é pai de FATEC e ETEC), ou atributos multivalorados (no Seguro de um carro, colocamos os vários motoristas possíveis para avaliar o valor do seguro), colocando em uma tabela as ligações entre pai e filho, ou entre os vários valores de um atributo. Chamamos isso de tabela ponte. 
RC: Através de uma tabela ponte.

3. Cite alguns motivos pelos quais é difícil a persistência de dados de redes sociais em bancos de dados relacionais.
RC: Schema Flexível e Dinâmico.

4. Cite dois objetivos pelos quais bancos de dados semi-estruturados são procurados pelas empresas nos dias atuais.
RL: Flexibilizando o Schema (modelagem) conseguimos desenvolver sistemas mais rapidamente, diminuindo os custos de desenvolvimento. A escalabilidade horizontal permite cortar custos de hardware, uma startup não necessita de grande investimento inicial, podendo começar com instâncias pequenas e crescendo a medida que o seu negócio escala.
RC: Schema Flexível e Dinâmico, Escalabilidade Horizontal, Resolvem bem Problemas Específicos, além disso são todos open source.

5. Diferencie escalabilidade horizontal e vertical para bancos de dados. Exemplifique.
RL: Escalabilidade horizontal implica Banco de Dados Distribuído, vemos isso na maior parte das aplicações de hoje: Instagram, Amazon, Google, TikTok... Arquitetura vertical, também chamada monolítica é exemplicada nos mainframes de bancos tradicionais: ITAÚ, Bradesco, Mastercard.

6. Bancos não relacionais são antigos, citando como exemplo IMS da década de 60. Cite alguns motivos pelos quais bancos NoSQL
ganharam tanto destaque nos dias de hoje.
1. São Open Source 2. Escalabilidade Horizontal 3. Schema Flexível e Dinâmico 4. Resolvem bem problemas específicos.

7. O que é consistência eventual. Qual é uma tradução errada em pt-br que deve ser evitada.
O que eu escrevo no nó primário, tem um delay para ser replicado nos nós secundários. A tradução errada para eventualmente consistência é pode não gravar.

8. Enuncie o teorema CAP.
Num sistema distribuído, num instante, só é possível termos duas das 3 características (Consistência, Disponibilidade, Particionamento)

9. Porque é difícil comparar bancos NoSQL entre si.
Porque atendem necessidades específicas

10. Dizemos que fazemos a modelagem no banco relacional 
Botton Up e no MongodDB Top Down. Explique.
No relacional partimos da tupla definida na normalização para o objeto, via ORM, de baixo para cima. No MongoDB preciso saber qual o uso do dado, para definir as collections, de "cima" para baixo.

11. O MongoDB não aceita “transações” (a partir da versão 4 existe um certo tipo de transação), porém ele é muito utilizado. Em que cenários ele é competitivo e em quais ele não é recomendável.
Competitivo para aplicação específicas, bem definidas, não recomendável para sistemas grandes e genéricos, como Sistemas de Cartão de Crédito.

12. O que é um upsert.
Se o documento já existe, atualiza, senão insere.

13. Disserte sobre Schema Design no MongoDB. 1:1, 1:N e N:N. Preencher os comentários acerca de frequencia de uso e tamanho do documento, ou da cardinalidade abaixo.
RH:CV 1:1
Post:comentários 1:N versus Cidade: Habitantes
Autores:Livros N:N

14. O que é o sharding no MongoDB. Isso pressupõe algum gargalo no banco de dados.
Particionamento horizontal da Collection. Tudo tem que passar pelo MongoS.

15. Cite duas vantagens de um banco colunar para agregações massivas de um sistema de BI.
1. Não preciso fazer FULL SCAN do registro todos, com todas as colunas
2. Posso colocar indices na coluna
3. Fator de compactação em disco é muito maior

16. Fale sobre as opções de persistência do Redis. O que significa in memory database.
a. Sem persistência
b. A cada X gravações ou Y milisegundos atualiza a base
c. Grava tudo no append log.

17. Qual é uma grande desvantagem do MongoDB em relação ao CouchDB. Explique.
CouchDB é ACID, porém isso torna o banco bem mais lento.

18. No Redis explique a vantagem de inserts TTL. Como é feito o namespace dos databases.
TTL = Time To Live, o que gravo tem um tempo de vida definido
Namespace = 0 1 2 ...

19. No MongoDB qual é a função do _id. Vantagem da collection ser schema free.
_id é a chave única do documento no cluster, produtividade no desenvolvimento

20. O que são “fire-and-forget functions” e sua vantagem.
Gravo sem esperar resposta do servidor, vantagem é ser muito rápido.

21. No MongoDB detalhe o findOne. O que são hint e explain. 
Encontra o primeiro documento que segue a sua query no cluster. Hint dá a ordem dos índices ao fazer uma query. Explain dá um log da última query para efeito de profile.

22. Explique o que significa ser “linearmente escalável” no caso do Cassandra. Qual é a limitação deste NoSQL.
Ao aumentar o número de nós, aumenta proporcionalmente a disponibilidade. A limitação é que o Cassandra é Eventualmente Consistente, isto é, gravo um primário e tenho um delay para atualizar todos os secundários.

23. O que é BASE e qual sua relação com ACID.
BASE é a relaxação (afrouxar) do ACID para ter maior escalabilidade.

24. Exemplifique uma situação onde bancos NoSQL não são adequados.
Sistemas grandes e genéricos, como um sistema de cartão de crédito. Devido à modelagem TOP-DOWN que parte do uso dos dados.

**Próximas questões são respondidas vendo o mini tutorial FISL ou os cursos M1 M2 M3, responder antes da prova P1**

25. Seja um exemplo de documento da collection username do curso {"_id":"fmasanori", "password":"abacate"}. Seguindo a lógica do
exemplo, insira um usuário genérico "username", com senha "1234".
26. Seja a collection username, de acordo com o documento exemplo. Execute uma busca de todos os usuários em ordem crescente de
username, sem mostrar o campo "password".
27. When connecting to an Atlas cluster using the shell, why do we provide the hostnames for all nodes when we launch mongo?
28. O que esse comando faz? db.movieDetails.find({"awards.wins": 2, "awards.nominations": 2}).count()
29. Como será a querie “How many movies in the movieDetails collection list "Western" second among its genres”?
30. In ships.shipwrecks collection, watlev describes the water level at the shipwreck site and depth describes how far below sea level the
ship rests. How many documents in the ships.shipwrecks collection match either of the following criteria: watlev equal to "always
dry" or depth equal to 0. Escreva com será a querie.
31. 100YWeatherSmall.data collection. The sections field in this collection identifies supplementary readings available in a given
document by a three-character code. How many documents list: "AG1", "MD1", and "OA1" among the codes in their sections array.
Your count should include all documents that include these three codes regardless of what other codes are also listed.
32. 100YWeatherSmall.data collection. How many documents in this collection contain exactly two elements in the sections array field?
33. How many documents in the citibike.trips collection have the key tripduration set to null? Ignore any documents that do not contain
the tripduration key.
34. video.movies collection. How many movies match the following criteria: The cast includes either of the following actors: "Jack
Nicholson", "John Huston". The viewerRating is greater than 7. The mpaaRating is "R".
35. Faça a query que procure os documentos na collection video.movies que possuem "Patty Jenkins" no campo director
36. Faça uma query que procure os documentos na collection citibike.trips que possuem tripduration >= 60 e <65
37. Dentro da collection video.movieDetails conte quantos documentos possuem genres do tipo "Comedy"
38. Dentro da collection video.movieDetails conte quantos documentos possuem exatamente 2 award wins e 2 award nominations
39. Dentro da collection video.movieDetails conte quantos documentos possuem rated "PG" e exatamente 10 award nominations
40. Dentro da collection video.movieDetails conte quantos documentos possuem "Western" como segundo na lista genres
41. Diga quais inserts serão executados nos comandos abaixo:
requests = [
InsertOne({ '_id': 11, 'name': 'Edgar Martinez', 'salary': "8.5M" }), # Insert #1
InsertOne({ '_id': 3, 'name': 'Alex Rodriguez', 'salary': "18.3M" }), # Insert #2
InsertOne({ '_id': 24, 'name': 'Ken Griffey Jr.', 'salary': "12.4M" }), # Insert #3
InsertOne({ '_id': 11, 'name': 'David Bell', 'salary': "2.5M" }), # Insert #4
InsertOne({ '_id': 19, 'name': 'Jay Buhner', 'salary': "5.1M" }) # Insert #5
]
response = employees.bulk_write(requests)
